	/*
	 * public BranchGroup createSceneGraph() { // Root graph BranchGroup objRoot
	 * = new BranchGroup();
	 * 
	 * // Create a Transformgroup to scale all objects so they // appear in the
	 * scene. TransformGroup objScale = new TransformGroup(); Transform3D t3d =
	 * new Transform3D(); t3d.setScale(0.5); objScale.setTransform(t3d);
	 * objRoot.addChild(objScale);
	 * 
	 * // Create the transform group node and initialize it to the // identity.
	 * Enable the TRANSFORM_WRITE capability so that // our behavior code can
	 * modify it at runtime. Add it to the // root of the subgraph.
	 * TransformGroup objTrans = new TransformGroup();
	 * objTrans.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
	 * objScale.addChild(objTrans);
	 * 
	 * // Create a simple shape leaf node, add it to the scene graph.
	 * objTrans.addChild(new ColorCube()); //objTrans.addChild(new
	 * Sphere(0.25f));
	 * 
	 * // Create a new Behavior object that will perform the desired //
	 * operation on the specified transform object and add it into // the scene
	 * graph. Transform3D yAxis = new Transform3D(); Alpha rotationAlpha = new
	 * Alpha(-1, Alpha.INCREASING_ENABLE, 0, 0, 4000, 0, 0, 0, 0, 0);
	 * 
	 * RotationInterpolator rotator = new RotationInterpolator(rotationAlpha,
	 * objTrans, yAxis, 0.0f, (float) Math.PI * 2.0f); BoundingSphere bounds =
	 * new BoundingSphere(new Point3d(0.0, 0.0, 0.0), 100.0);
	 * rotator.setSchedulingBounds(bounds); objTrans.addChild(rotator);
	 * 
	 * // Lightning the object // Create a red light that shines for 100m from
	 * the origin
	 * 
	 * Color3f light1Color = new Color3f(1.8f, 0.1f, 0.1f);
	 * 
	 * BoundingSphere bounds2 = new BoundingSphere(new Point3d(0.0, 0.0, 0.0),
	 * 100.0);
	 * 
	 * Vector3f light1Direction = new Vector3f(4.0f, -7.0f, -12.0f);
	 * 
	 * DirectionalLight light1
	 * 
	 * = new DirectionalLight(light1Color, light1Direction);
	 * 
	 * light1.setInfluencingBounds(bounds2);
	 * 
	 * objRoot.addChild(light1);
	 * 
	 * // Set Light Color3f ambientColor = new Color3f(1.0f, 1.0f, 1.0f);
	 * 
	 * AmbientLight ambientLightNode = new AmbientLight(ambientColor);
	 * 
	 * ambientLightNode.setInfluencingBounds(bounds);
	 * 
	 * objRoot.addChild(ambientLightNode); // Have Java 3D perform optimizations
	 * on this scene graph. objRoot.compile();
	 * 
	 * return objRoot; }
	 */

//	public BranchGroup createSceneGraph() {
//		int count = 0;
//		BranchGroup lineGroup = new BranchGroup();
//		objTrans = new TransformGroup();
//		objTrans.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
//		lineGroup.addChild(objTrans);
//
//		Appearance app = new Appearance();
//		ColoringAttributes ca = new ColoringAttributes(new Color3f(204.0f,
//				204.0f, 204.0f), ColoringAttributes.SHADE_FLAT);
//		app.setColoringAttributes(ca);
//
//		Point3f[] plaPts = new Point3f[10 * 10 * 10];
//		Color3f[] colPts = new Color3f[10 * 10 * 10]; // parallel to
//														// coordinates, colors.
//
//		for (int x = 0; x < 10; x++) {
//			for (int y = 0; y < 10; y++) {
//				for (int z = 0; z < 10; z++) {
//					coord[count] = x/10.0f;
//					colors[count] = x/3.0f;
//					plaPts[count] = new Point3f(x / 10.0f, y / 10.0f, z / 10.0f);
//					colPts[count] = new Color3f(x / 3.0f, y / 3.0f,
//							(float) ((x + y) / 3.0));// my arbitrary color set
//														// :)
//					// Look up line, i and j are divided by 10.0f to be able to
//					// see the points inside the view screen
//					count++;
//				}
//			}
//		}
//		pla = new PointArray(10*10*10, PointArray.COORDINATES
//				| PointArray.COLOR_3 | PointArray.BY_REFERENCE);
//		pla.setCapability(GeometryArray.ALLOW_REF_DATA_WRITE);
//		pla.setCapability(GeometryArray.ALLOW_REF_DATA_READ);
//		
//		pla.setCoordRefFloat(coord);
//		pla.setColorRefFloat(colors);
////		pla.setCoordinates(0, plaPts);
////		pla.setColors(0, colPts);
//
//		PointAttributes a_point_just_bigger = new PointAttributes();
//		a_point_just_bigger.setPointSize(2.0f);// 10 pixel-wide point
//		a_point_just_bigger.setPointAntialiasingEnable(true);// now points are
//																// sphere-like(not
//																// a cube)
//		app.setPointAttributes(a_point_just_bigger);
//
//		Shape3D plShape = new Shape3D(pla, app);
//
//		objTrans = new TransformGroup();
//		objTrans.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
//
//		Transform3D pos1 = new Transform3D();
//		pos1.setTranslation(new Vector3f(0.0f, 0.0f, 0.0f));
//
//		objTrans.setTransform(pos1);
//		objTrans.addChild(plShape);
//
//		TransformGroup objRotate = new TransformGroup();
//		objRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
//		objRotate.addChild(objTrans);
//
//		MouseRotate f1 = new MouseRotate();
//		f1.setSchedulingBounds(new BoundingSphere());
//		f1.setTransformGroup(objRotate);
//		lineGroup.addChild(f1);
//
//		lineGroup.addChild(objRotate);
//		return lineGroup;
//	}